using System;
using System.Windows.Input;



namespace Client.Commands
{
    public class TriggerCommand : ICommand
    {
        public event EventHandler CanExecuteChanged;
        private Action _action;

        public TriggerCommand(Action action)
        {
            _action = action;
        }



        public bool CanExecute(Object parameter)
        {
            return true;
        }

        public void Execute(object parameter)
        {
            _action?.Invoke();
        }
    }

    public class TriggerCommand<T> : ICommand
    {
        public event EventHandler CanExecuteChanged;
        private Action<T> Action { get; set; }

        public TriggerCommand(Action<T> action)
        {
            Action = action;
        }

        public bool CanExecute(object parameter)
        {
            return true;
        }

        public void Execute(object parameter)
        {
            if (parameter is T t && parameter != null)
            {
                Action?.Invoke(t);
            }

        }
    }
}
#pragma checksum "..\..\..\..\..\Views\Controls\AccessDenied.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "04403578C1F89D99D37D05281F9BF63DDB02315E"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Client.Views.Controls;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace Client.Views.Controls {
    
    
    /// <summary>
    /// AccessDenied
    /// </summary>
    public partial class AccessDenied : System.Windows.Controls.UserControl, System.Windows.Markup.IComponentConnector {
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/Client;component/views/controls/accessdenied.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\..\..\Views\Controls\AccessDenied.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            this._contentLoaded = true;
        }
    }
}

#pragma checksum "..\..\..\..\..\Views\Controls\AdminControl.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "0FF9A56D718F6818997FA2B3BDB48F9CF939FD9C"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Client.Views.Controls;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace Client.Views.Controls {
    
    
    /// <summary>
    /// AdminControl
    /// </summary>
    public partial class AdminControl : System.Windows.Controls.UserControl, System.Windows.Markup.IComponentConnector {
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/Client;component/views/controls/admincontrol.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\..\..\Views\Controls\AdminControl.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            this._contentLoaded = true;
        }
    }
}

#pragma checksum "..\..\..\..\..\Views\Controls\AuthorizationControl.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "CA3076FE15D3B009E94A550F2E9ACB4384EB8F9A"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Client.Views.Controls;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace Client.Views.Controls {
    
    
    /// <summary>
    /// AuthorizationControl
    /// </summary>
    public partial class AuthorizationControl : System.Windows.Controls.UserControl, System.Windows.Markup.IComponentConnector {
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/Client;component/views/controls/authorizationcontrol.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\..\..\Views\Controls\AuthorizationControl.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            this._contentLoaded = true;
        }
    }
}

#pragma checksum "..\..\..\..\..\Views\Controls\OrderControl.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "F70996FE242CB976C7934B062A88AFE0FCC0D778"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Client.Views.Controls;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace Client.Views.Controls {
    
    
    /// <summary>
    /// OrderControl
    /// </summary>
    public partial class OrderControl : System.Windows.Controls.UserControl, System.Windows.Markup.IComponentConnector {
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/Client;component/views/controls/ordercontrol.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\..\..\Views\Controls\OrderControl.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            this._contentLoaded = true;
        }
    }
}

#pragma checksum "..\..\..\..\..\Views\Controls\UserCabinetControl.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1332EB865115B1F2478458E6BDA83FF1DDD9488C"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Client.Views.Controls;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace Client.Views.Controls {
    
    
    /// <summary>
    /// UserCabinetControl
    /// </summary>
    public partial class UserCabinetControl : System.Windows.Controls.UserControl, System.Windows.Markup.IComponentConnector {
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/Client;component/views/controls/usercabinetcontrol.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\..\..\Views\Controls\UserCabinetControl.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            this._contentLoaded = true;
        }
    }
}

#pragma checksum "..\..\..\..\Views\AddDish.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "72A0610A6485A2BEFCC806C80D8358F39F1575A8"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Client.ViewModel;
using Client.Views;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace Client.Views {
    
    
    /// <summary>
    /// AddDish
    /// </summary>
    public partial class AddDish : System.Windows.Window, System.Windows.Markup.IComponentConnector {
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/Client;component/views/adddish.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\..\Views\AddDish.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            
            #line 32 "..\..\..\..\Views\AddDish.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Close_Click);
            
            #line default
            #line hidden
            return;
            }
            this._contentLoaded = true;
        }
    }
}

#pragma checksum "..\..\..\..\Views\AddWaiter.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "A52E2CF3C7BB7ACA951D414D5A97EA481059A217"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Client.ViewModel;
using Client.Views;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace Client.Views {
    
    
    /// <summary>
    /// AddWaiter
    /// </summary>
    public partial class AddWaiter : System.Windows.Window, System.Windows.Markup.IComponentConnector {
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/Client;component/views/addwaiter.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\..\Views\AddWaiter.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            
            #line 34 "..\..\..\..\Views\AddWaiter.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Close_Click);
            
            #line default
            #line hidden
            return;
            }
            this._contentLoaded = true;
        }
    }
}

#pragma checksum "..\..\..\..\Views\EditWaiter.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "92E03C5C694924453669F0569EFBAC61CD002560"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Client.ViewModel;
using Client.Views;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace Client.Views {
    
    
    /// <summary>
    /// EditWaiter
    /// </summary>
    public partial class EditWaiter : System.Windows.Window, System.Windows.Markup.IComponentConnector {
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/Client;component/views/editwaiter.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\..\Views\EditWaiter.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            
            #line 34 "..\..\..\..\Views\EditWaiter.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Close_Click);
            
            #line default
            #line hidden
            return;
            }
            this._contentLoaded = true;
        }
    }
}

#pragma checksum "..\..\..\..\Views\MainWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "98747B3CEAB8743EB28D5DBD78D779EA86807635"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Client;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace Client {
    
    
    /// <summary>
    /// MainWindow
    /// </summary>
    public partial class MainWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector {
        
        
        #line 71 "..\..\..\..\Views\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Button AdminButton;
        
        #line default
        #line hidden
        
        
        #line 77 "..\..\..\..\Views\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ContentControl MainContentController;
        
        #line default
        #line hidden
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/Client;component/views/mainwindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\..\Views\MainWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            this.AdminButton = ((System.Windows.Controls.Button)(target));
            
            #line 71 "..\..\..\..\Views\MainWindow.xaml"
            this.AdminButton.Click += new System.Windows.RoutedEventHandler(this.MenuClick);
            
            #line default
            #line hidden
            return;
            case 2:
            
            #line 72 "..\..\..\..\Views\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuClick);
            
            #line default
            #line hidden
            return;
            case 3:
            
            #line 73 "..\..\..\..\Views\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuClick);
            
            #line default
            #line hidden
            return;
            case 4:
            this.MainContentController = ((System.Windows.Controls.ContentControl)(target));
            return;
            }
            this._contentLoaded = true;
        }
    }
}

#pragma checksum "..\..\..\..\Views\NewTableWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "0AA3ED2AB6F66772A493AC1F04C95CC677EF5C46"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Client;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace Client {
    
    
    /// <summary>
    /// NewTableWindow
    /// </summary>
    public partial class NewTableWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector {
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/Client;component/views/newtablewindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\..\Views\NewTableWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            this._contentLoaded = true;
        }
    }
}

// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v7.0", FrameworkDisplayName = ".NET 7.0")]
#pragma checksum "..\..\..\App.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "BE9BE078EF42C549E843EA6CC700F58D503EC0D7"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Client;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace Client {
    
    
    /// <summary>
    /// App
    /// </summary>
    public partial class App : System.Windows.Application {
        
        /// <summary>
        /// Application Entry Point.
        /// </summary>
        [System.STAThreadAttribute()]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        public static void Main() {
            Client.App app = new Client.App();
            app.Run();
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Client")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+928eefb62a53fe54254a520c9729772a922b60cd")]
[assembly: System.Reflection.AssemblyProductAttribute("Client")]
[assembly: System.Reflection.AssemblyTitleAttribute("Client")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// РЎРѕР·РґР°РЅРѕ РєР»Р°СЃСЃРѕРј WriteCodeFragment MSBuild.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("appsettingsclient.json")]


namespace Client.Options;

public class BackendOptions
{
    public string Host { get; set; }
}
using System.Collections.Generic;

namespace Client.Resources;



public class HotDish
{
    public string? Name { get; set; }
    public int Price { get; set; }
    public string? Description { get; set; }
    public List<HotDish> HotDishes { get; set; } = new()
    {
        new HotDish { Name = "Cocicka", Price = 20, Description = "OchenVkusno" },
        new HotDish { Name = "Kotletka", Price = 20, Description = "OchenVkusno" },
        new HotDish { Name = "Pureshka", Price = 20, Description = "OchenVkusno" },
        new HotDish { Name = "Makaroshki", Price = 20, Description = "OchenVkusno" }
        
    };
}
using System;
using System.ComponentModel;
using System.Net.Http;
using Client.Options;
using Microsoft.Extensions.Options;
using MyCRM.Model;

namespace Client.Base;

public abstract class BaseViewModel : INotifyPropertyChanged
{
  //  public event Action UpdateMainWindow;
    
    public User SelectedUser { get; set; } = new();
    public string Token { get; set; } 
    
    public event PropertyChangedEventHandler PropertyChanged;
    public void RaisePropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    
}
using System;
using System.Net.Http;
using Client.Base;
using Client.Commands;
using Client.Options;
using Common.HandleResponses;
using Microsoft.Extensions.Options;
using MyCRM.Authorize.Responses;
using MyCRM.Model;

namespace Client.ViewModel;

public class AuthorizeViewModel : BaseViewModel
{
    public event Action UpdateMainWindow;
    
    private readonly BackendOptions _options;
    private readonly HttpClient _httpClient;
    
    public LoginRequest LoginRequest { get; set; } = new();
    public TriggerCommand LoginCommand { get; set; }
    public TriggerCommand LogoutCommand { get; set; }
    
    
    
    public AuthorizeViewModel(IOptions<BackendOptions> options,IHttpClientFactory clientFactory)
    {
        _options = options.Value;
        _httpClient = clientFactory.CreateClient("HttpClient");
        InitializeCommands();
        
#if DEBUG
          
        SelectedUser = new User() {
            FirstName = "Guest",
            LastName = "Guest",
            Role = new UserRole(){Id = 1, Role = RoleType.Admin}};
                    
        Token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIjoiMSIsImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwOC8wNi9pZGVudGl0eS9jbGFpbXMvcm9sZSI6IkFkbWluIiwibmJmIjoxNjk3Njc2NzU4LCJleHAiOjIwMTMyOTU5NTh9.fXzK7w4KdS1poYiAPer_4Jmmx41i6CZF8fr2yN0PuHY";
         
#endif
        
    }
    private void InitializeCommands()
    {
        LoginCommand = new TriggerCommand(Login);
        LogoutCommand = new TriggerCommand(Logout);
    }
    private async void Login()
    {
        var response = await _httpClient.GetAsync(_options.Host + $"/api/Authorization/Login?UserId={LoginRequest.UserId}&password={LoginRequest.Password}");

        if (response.IsSuccessStatusCode)
        {
            var responseObj = await ResponseHandler.DeserializeAsync<LoginResponse>(response);
            Token = responseObj.Token;
            
            SelectedUser = responseObj.User;
            LoginRequest = new LoginRequest();
            RaisePropertyChanged(nameof(SelectedUser));
            UpdateMainWindow.Invoke();
        }
        
    }
    
    private void Logout()
    {
        SelectedUser = new User();
        Token = null;
        RaisePropertyChanged(nameof(SelectedUser));
        UpdateMainWindow.Invoke();
    }
}
namespace Client.ViewModel;

public class DataContexts
{
    public MainViewModel MainViewModel { get; set; }
    public AuthorizeViewModel AuthorizeViewModel { get; set; }

    public DataContexts(MainViewModel mainViewModel, AuthorizeViewModel authorizeViewModel)
    {
        MainViewModel = mainViewModel;
        AuthorizeViewModel = authorizeViewModel;
    }
}
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Json;
using System.Reflection;
using System.Security.Claims;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using Azure;
using Client.Base;
using Client.Commands;
using Client.Options;
using Client.Views;
using Common;
using Common.HandleResponses;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Http.HttpResults;
using Microsoft.AspNetCore.Mvc.ViewEngines;
using Microsoft.Extensions.Options;
using MyCRM.Authorize.Responses;
using MyCRM.Model;
using MyCRM.Requests;
using MyCRM.Responses;
using Newtonsoft.Json;

namespace Client.ViewModel;

public class MainViewModel : BaseViewModel
{
    private readonly BackendOptions _options;
    private readonly HttpClient _httpClient;

    private GetWaiterResponse _selectedWaiter { get; set; }

   
    

    public ObservableCollection<GetWaiterResponse> Waiters { get; set; } = new();

    public ObservableCollection<GetDishResponse> Dishes { get; set; } = new();
    

    public EditWaiterRequest EditWaiterRequest { get; set; } = new ();
    public AddWaiterRequest AddWaiterRequest { get; set; } = new();
    public AddDishRequest AddDishRequest { get; set; } = new();
    
    
    
    public TriggerCommand SomeCommand { get; set; } 
    public TriggerCommand OpenAddWaiterFormCommand { get; set; }
    public TriggerCommand OpenAddDishFormCommand { get; set; }
    public TriggerCommand AddWaiterCommand { get; set; }
    public TriggerCommand AddDishCommand { get; set; }
    public TriggerCommand<object> OpenEditWaiterFormCommand { get; set; }

    public TriggerCommand<object> DeleteWaiterCommand { get; set; }

    
    public TriggerCommand LoginCommand { get; set; }
    public TriggerCommand LogoutCommand { get; set; }
    public TriggerCommand EditWaiterCommand { get; set; }
    

    private MainWindow _mainWindow;
    

    public MainViewModel(IOptions<BackendOptions> options,IHttpClientFactory clientFactory) 
    {
        _options = options.Value;
        _httpClient = clientFactory.CreateClient("HttpClient");
        InitializeCommands();
        InitializeData();
    }

    private void InitializeCommands()
    {
        SomeCommand = new TriggerCommand(NewTableSomeCommand);
        OpenEditWaiterFormCommand = new TriggerCommand<object>(HandleOpenEditWaiterForm);
        OpenAddWaiterFormCommand = new TriggerCommand(HandleOpenAddWaiterForm);
        OpenAddDishFormCommand = new TriggerCommand(HandleOpenAddDishForm);
        AddWaiterCommand = new TriggerCommand(HandleAddWaiter);
        AddDishCommand = new TriggerCommand(HandleAddDish);
        DeleteWaiterCommand = new TriggerCommand<object>(HandleDeleteWaiter);

        EditWaiterCommand = new TriggerCommand(HandleEditWaiterCommand);
    }


    private async void InitializeData()
    {
        try
        {

            
            Waiters = await GetAllWaiters();
            Dishes = await GetAllDishes();
            RaisePropertyChanged(nameof(Waiters));
            RaisePropertyChanged(nameof(Dishes));
        }
        catch (Exception e)
        {
            MessageBox.Show("Ошибка соединения с Сервером");
        }
    }
    private void NewTableSomeCommand()
    {
        NewTableWindow newTableWindow = new NewTableWindow();
        newTableWindow.Show();
    }

    private void HandleOpenAddWaiterForm()
    {
        var win = new AddWaiter(this);
        win.Show();
    }
    private void HandleOpenAddDishForm()
    {
        var win = new AddDish(this);
        win.Show();
    }

    
    
    //Добавить официанта
    private async void HandleAddWaiter()
    {
        var response = await _httpClient.PostAsJsonAsync(_options.Host + "/api/Admin/Waiter", AddWaiterRequest);

        if (response.IsSuccessStatusCode)
        {
            var responseObj = await ResponseHandler.DeserializeAsync<GetWaiterResponse>(response);
            
            Waiters.Add(responseObj);
        }
    }

    //Удалить Официанта
    private async void HandleDeleteWaiter(object waiter)
    {
        var Datacontext = ((Button)waiter).DataContext;
        if (Datacontext is GetWaiterResponse _waiter)
        {
            var response = await _httpClient.DeleteAsync(_options.Host + $"/api/Admin/Waiter/{_waiter.Id}"); 
            if (response.IsSuccessStatusCode)
            {
                Waiters.Remove(_waiter);
            }
        }
    }
    




    //Получить всех официантов
    private async Task<ObservableCollection<GetWaiterResponse>> GetAllWaiters()
    {
        var response = await _httpClient.GetAsync(_options.Host + "/api/Admin/Waiters");

        var responseObj = await ResponseHandler.DeserializeAsync<ObservableCollection<GetWaiterResponse>>(response);
   
        return responseObj;
    }
    
    
    
    
    //Добавить блюдо
    private async void HandleAddDish() 
    {
        var response = await _httpClient.PostAsJsonAsync(_options.Host + "/api/Kitchen/Dish", AddDishRequest);
        if (response.IsSuccessStatusCode)
        {
            var responseObj = await ResponseHandler.DeserializeAsync<GetDishResponse>(response);

            Dishes.Add(responseObj);
        }
    }
    
    //Получить все блюда
    private async Task<ObservableCollection<GetDishResponse>> GetAllDishes()
    {
        var response = await _httpClient.GetAsync(_options.Host + "/api/Kitchen/Dishes");

        var responseObj = await ResponseHandler.DeserializeAsync<ObservableCollection<GetDishResponse>>(response);

        return responseObj;
        
    }
    
    //Редактирование Официанта
    private  void HandleOpenEditWaiterForm(object waiter) // Todo Сделать метод
    {
        var Datacontext = ((Button)waiter).DataContext;
        if(Datacontext is GetWaiterResponse _waiter) // rework
        {

            EditWaiterRequest.Id = _waiter.Id;
            EditWaiterRequest.FirstName = _waiter.FirstName;
            EditWaiterRequest.LastName = _waiter.LastName;
            EditWaiterRequest.Patronymic = _waiter.Patronymic;
            EditWaiterRequest.Phone = _waiter.Phone;
        }

       
        var win = new EditWaiter(this);
        win.Show();  
    }
    private async void HandleEditWaiterCommand()
    {
        var response = await _httpClient.PutAsJsonAsync(_options.Host + $"/api/Admin/Waiter/{EditWaiterRequest.Id}", EditWaiterRequest);

        if (response.IsSuccessStatusCode)
        {
            var responseObj = await ResponseHandler.DeserializeAsync<GetWaiterResponse>(response);
            
            var objToEdit = Waiters.FirstOrDefault(i => i.Id == responseObj.Id);
            
            if (objToEdit != null)
            {
                int i = Waiters.IndexOf(objToEdit);
                Waiters[i] = responseObj;
            }
        }
    }
}
using System.Windows.Controls;

namespace Client.Views.Controls;

public partial class AccessDenied : UserControl
{
    public AccessDenied()
    {
        InitializeComponent();
    }
}
using System.Windows;
using System.Windows.Controls;
using Client.ViewModel;

namespace Client.Views.Controls;

public partial class AdminControl : UserControl
{
    private MainViewModel _viewModel;
    public AdminControl(MainViewModel viewModel)
    {
        _viewModel = viewModel;
        InitializeComponent();
        DataContext = viewModel;
    }
    
    private void OpenAddWaiter(object sender, RoutedEventArgs e)
    {
        var win = new AddWaiter(_viewModel);
        win.Show();
    }

    private void OpenAddDish(object sender, RoutedEventArgs e) 
    {
        var win = new AddDish(_viewModel);
        win.Show();
    }
}
using System.Windows.Controls;
using Client.ViewModel;

namespace Client.Views.Controls;

public partial class AuthorizationControl : UserControl
{
    private AuthorizeViewModel _viewModel;
    public AuthorizationControl(AuthorizeViewModel viewModel)
    {
        _viewModel = viewModel;
        InitializeComponent();
        DataContext = _viewModel;
    }
}
using System.Windows.Controls;

namespace Client.Views.Controls;

public partial class OrderControl : UserControl
{
    public OrderControl()
    {
        InitializeComponent();
    }
}
using System.Windows.Controls;
using Client.ViewModel;

namespace Client.Views.Controls;

public partial class UserCabinetControl : UserControl
{
    public UserCabinetControl(AuthorizeViewModel viewModel)
    {
        InitializeComponent();
        DataContext = viewModel;
    }
}
using Client.ViewModel;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace Client.Views
{
    /// <summary>
    /// Логика взаимодействия для AddDish.xaml
    /// </summary>
    public partial class AddDish : Window
    {
        public AddDish(MainViewModel viewModel)
        {
            InitializeComponent();
            DataContext = viewModel;
        }

        private void Close_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }
    }
}
using System;
using System.Windows;
using Client.ViewModel;

namespace Client.Views;

public partial class AddWaiter : Window
{
    public AddWaiter(MainViewModel viewModel)
    {
        InitializeComponent();
        DataContext = viewModel;
    }
    
    private void Close_Click(object sender, RoutedEventArgs e)
    {
        Close();
    }
}
using Client.ViewModel;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace Client.Views
{
    /// <summary>
    /// Логика взаимодействия для EditWaiter.xaml
    /// </summary>
    public partial class EditWaiter : Window
    {
        private MainViewModel _viewModel;



        public EditWaiter(MainViewModel viewModel)
        {
            _viewModel = viewModel;
            InitializeComponent();
            DataContext = viewModel;
        }


        private void Close_Click(object sender, RoutedEventArgs e)
        {
             Close();
        }
        
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using Client.ViewModel;
using Client.Views;
using Client.Views.Controls;
using Common;
using MyCRM.Model;

namespace Client
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private MainViewModel _viewModel;
        private AuthorizeViewModel _authorizeViewModel;
      
        private AuthorizationControl AuthorizationControl { get; set; }
        private OrderControl OrderControl { get; set; }
        private AdminControl AdminControl { get; set; }
        private UserCabinetControl UserCabinet { get; set; }
        private AccessDenied AccessDenied { get; set; }

    
        public string currentTag { get; set; }
        
        public MainWindow(MainViewModel viewModel,AuthorizeViewModel authorizeViewModel)
        {
            _authorizeViewModel = authorizeViewModel;
            InitializeComponent();
            _viewModel = viewModel;
            DataContext = new DataContexts(viewModel,authorizeViewModel);
            
            AuthorizationControl = new AuthorizationControl(_authorizeViewModel);
            OrderControl = new OrderControl();
            AdminControl = new AdminControl(_viewModel);
            UserCabinet = new UserCabinetControl(_authorizeViewModel);
            
            authorizeViewModel.UpdateMainWindow += Update;
            Update();
        }
       

        public void Update()
        {
            if (_authorizeViewModel.Token == null)
            {
                MainContentController.Content = new AuthorizationControl(_authorizeViewModel);
                 return;
            }
            
            switch (currentTag)
            {
                case ("Page1"):
                    if (_authorizeViewModel.SelectedUser.Role.Role == RoleType.Admin)
                    {
                        MainContentController.Content = AdminControl;
                        break;
                    }
                    MainContentController.Content = new AccessDenied();
                    break;
                
                case ("Page2"):
                    if (_authorizeViewModel.SelectedUser.Role.Role == RoleType.Admin || _authorizeViewModel.SelectedUser.Role.Role == RoleType.Waiter)
                    {
                        MainContentController.Content = OrderControl;
                        break;
                    }
                    MainContentController.Content = new AccessDenied();
                    break;
                
                case ("Page3"):
                        MainContentController.Content = new UserCabinetControl(_authorizeViewModel);
                    break;
                default:
                    MainContentController.Content = new UserCabinetControl(_authorizeViewModel);
                    break;
            }
            UpdateLayout();
        }
        private void MenuClick(object sender, RoutedEventArgs e)
        {
            currentTag = (sender as Button).Tag.ToString();
            Update();
        }
        
    }
}
using System.Windows;

namespace Client;

public partial class NewTableWindow : Window
{
    public NewTableWindow()
    {
        InitializeComponent();
    }
}
using System.Configuration;
using System.IO;
using System.Net.Mime;
using System.Windows;
using Client.Options;
using Client.ViewModel;
using Client.Views;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

namespace Client;

public partial class App : Application
{
    private readonly IHost _host;
    public static IConfiguration Configuration { get; private set; }
    public App()
    {
        Configuration = new ConfigurationBuilder()
            .SetBasePath(Directory.GetCurrentDirectory()) // Укажите путь к файлу appsettings.json
            .AddJsonFile("appsettingsClient.json").Build();
        
        _host = Host.CreateDefaultBuilder()
            .ConfigureServices((context, services) =>
            {
                services.AddSingleton<MainViewModel>();
                services.AddSingleton<AuthorizeViewModel>();
                services.AddSingleton<MainWindow>();
                
                services.Configure<BackendOptions>(Configuration.GetSection("Backend"));
                services.AddHttpClient("HttpClient");
            })
            .Build();
    }
   
    protected override void OnStartup(StartupEventArgs e)
    {
        _host.Start();

        MainWindow = _host.Services.GetRequiredService<MainWindow>();
        MainWindow.Show();

        base.OnStartup(e);
    }
    protected override void OnExit(ExitEventArgs e)
    {
        _host.StopAsync();
        _host.Dispose();

        base.OnExit(e);
    }
}
using System.Windows;

[assembly: ThemeInfo(
    ResourceDictionaryLocation.None, //where theme specific resource dictionaries are located
    //(used if a resource is not found in the page,
    // or application resource dictionaries)
    ResourceDictionaryLocation.SourceAssembly //where the generic resource dictionary is located
    //(used if a resource is not found in the page,
    // app, or any theme specific resource dictionaries)
)]
namespace Client;

public class LoginRequest
{
    public string UserId { get; set; }
    public string Password { get; set; }
}
using System.Net.Http;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace Common.HandleResponses
{
    public static class ResponseHandler
    {
        public static async Task<T> DeserializeAsync<T>(HttpResponseMessage response)
        {
            var responseJson = await response.Content.ReadAsStringAsync();
            var responseObj = JsonConvert.DeserializeObject<T>(responseJson);

            return responseObj;
        }
        
    }
}


// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETFramework,Version=v4.8", FrameworkDisplayName = ".NET Framework 4.8")]
using System;
using System.ComponentModel.DataAnnotations;
using System.Linq;

namespace Common
{
    public static class EnumHelper
    {
        public static string DisplayName(this Enum value)
        {
            var type = value.GetType();
            var member = type.GetMember(value.ToString());
            var displayName =
                (DisplayAttribute)member[0].GetCustomAttributes(typeof(DisplayAttribute), false).FirstOrDefault();

            return displayName != null ? displayName.Name : value.ToString();
        }

        public static TEnum ToEnum<TEnum>(string strEnumValue)
        {
            if (!Enum.IsDefined(typeof(TEnum), strEnumValue))
            {
                throw new Exception($"For enum string {strEnumValue} not founded enum value");
            }

            return (TEnum)Enum.Parse(typeof(TEnum), strEnumValue);
        }
        
        public static TEnum FromDisplayName<TEnum>(string displayName)
        {
            var displayToEnumNameMap = typeof(TEnum).GetFields()
                .Where(t => t.CustomAttributes.Any(a => a.AttributeType == typeof(DisplayAttribute))).ToDictionary(t =>
                        t.CustomAttributes.Single().NamedArguments.Single().TypedValue.ToString().Replace("\"", ""),
                    t => t.Name);
            if (!displayToEnumNameMap.ContainsKey(displayName))
            {
                throw new Exception($"For DisplayName string {displayName} not founded enum value");
            }

            return ToEnum<TEnum>(displayToEnumNameMap[displayName]);
        }
    }
}
using MyCRM.Model;

namespace MyCRM.Authorize.Responses;

public class LoginResponse
{
    public string Token { get; set; }
    public User User { get; set; }

    public LoginResponse(string token, User user)
    {
        Token = token;
        User = user;
    }
}
using System.Security.Claims;

namespace MyCRM.Authorize;

public static class ClaimExtentions
{
    public static string GetUsername(this ClaimsPrincipal user)
    {
        return user.FindFirst(ClaimTypes.Name)?.Value;
    }
}
using Microsoft.AspNetCore.Mvc.Filters;
using MyCRM.Database;

namespace MyCRM.Authorize;

[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method)]
public class CustomAuthorizeAttribute : Attribute,IAuthorizationFilter
{
    private MainDbContext _dbcontext;

   // private readonly IList<Role> _roles;



    public string Roles;
   

    public void OnAuthorization(AuthorizationFilterContext context)
    {
        _dbcontext = context.HttpContext.RequestServices.GetRequiredService<MainDbContext>();

        var user = ClaimExtentions.GetUsername(context.HttpContext.User);
        
    }
}
namespace MyCRM.Authorize;

public class JwtOptions
{
    public string SecretKey { get; set; }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Common;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Identity.Client;
using MyCRM.Database;
using MyCRM.Model;
using MyCRM.Requests;
using MyCRM.Responses;

namespace MyCRM.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AdminController : ControllerBase
    {
        private readonly MainDbContext _dbContext;

        public AdminController(MainDbContext dbContext)
        {
            _dbContext = dbContext;
        }
        
        [HttpGet("Waiters")]
        public async Task<ActionResult<IEnumerable<GetWaiterResponse>>> GetWaiters()
        {
          if (_dbContext.Waiters == null)
          {
              return NotFound();
          }

          var waiters = await _dbContext.Waiters.ToListAsync();


          var response = new List<GetWaiterResponse>();

          waiters.ForEach(i => response.Add(new GetWaiterResponse(i)));
          
          return response;
        }
        
        [HttpGet("Waiter/{id}")]
        public async Task<ActionResult<Waiter>> GetWaiter(int id)
        {
            var waiter = await _dbContext.Waiters.FindAsync(id);

            if (waiter == null)
            {
                return NotFound();
            }

            return waiter;
        }
        
        [HttpPut("Waiter/{id}")]
        public async Task<GetWaiterResponse> EditWaiter(int id, [FromBody]EditWaiterRequest waiter) 
        {
            var waiterToUpdate = await _dbContext.Waiters.FindAsync(id);
            waiterToUpdate.FirstName = waiter.FirstName;
            waiterToUpdate.LastName = waiter.LastName;
            waiterToUpdate.Patronymic = waiter.Patronymic;
            waiterToUpdate.Phone = waiter.Phone;

            await _dbContext.SaveChangesAsync();
          

            var response = new GetWaiterResponse(waiterToUpdate);
            return response;
        }

        [HttpPost("AddUser")]
        public async Task<IActionResult> PostUser(AddWaiterRequest request)
        {
            var waiter = new User()
            {
                FirstName = request.FirstName,
                LastName = request.LastName,
                Patronymic = request.Patronymic,
                Phone = request.Phone,
                RoleId = 2
            };
            var waiterEntity = await _dbContext.Users.AddAsync(waiter);
            await _dbContext.SaveChangesAsync();
            return Ok();
        }

        [HttpPost("Waiter")]
        public async Task<IActionResult> PostWaiter(AddWaiterRequest request)
        {
          var waiter = new Waiter()
          {
              FirstName = request.FirstName,
              LastName = request.LastName,
              Patronymic = request.Patronymic,
              Phone = request.Phone,
              RoleId = 2
          };
            var waiterEntity = await _dbContext.Waiters.AddAsync(waiter);
            await _dbContext.SaveChangesAsync();

            var response = new GetWaiterResponse(waiterEntity.Entity);
            
            return Ok(response);
        }
        
        [HttpDelete("Waiter/{id}")]
        public async Task<IActionResult> DeleteWaiter(int id)
        {
            if (_dbContext.Waiters == null)
            {
                return NotFound();
            }
            var waiter = await _dbContext.Waiters.FindAsync(id);
            if (waiter == null)
            {
                return NotFound();
            }

            _dbContext.Waiters.Remove(waiter);
            await _dbContext.SaveChangesAsync();

            return NoContent();
        }

        //TableController

        [HttpGet("Tables")]
        public async Task<ActionResult<IEnumerable<GetTableResponse>>> GetTables()
        {
            if (_dbContext.Tables == null)
            {
                return NotFound();
            }

            var tables = await _dbContext.Tables.ToListAsync();

            var response = new List<GetTableResponse>();

            tables.ForEach(i => response.Add(new GetTableResponse(i)));

            return response;
        }


        [HttpGet("Table/{id}")]
        public async Task<ActionResult<Table>> GetTable(int id)
        {
            if (_dbContext.Tables == null)
            {
                return NotFound();
            }
            var table = await _dbContext.Tables.FindAsync(id);

            if (table == null)
            {
                return NotFound();
            }

            return table;
        }


        [HttpPut("Table/{id}")]
        public async Task<GetTableResponse> EditTable(int id, [FromBody] EditTableRequest table)
        {
            var tableToUpdate = await _dbContext.Tables.FindAsync(id);
            tableToUpdate.Description = table.Description;
            


            await _dbContext.SaveChangesAsync();


            var response = new GetTableResponse(tableToUpdate);
            return response;
        }


        [HttpPost("Table")]
        public async Task<ActionResult<Table>> PostTable(AddTableRequest request)
        {
            if (_dbContext.Tables == null)
            {
                return Problem("Entity set 'MainDbContext.Tables'  is null.");
            }

            var table = new Table()
            {
                Description = request.Description,
                
            };

            await _dbContext.Tables.AddAsync(table);
            await _dbContext.SaveChangesAsync();

            return CreatedAtAction("GetTable", new { id = table.Id }, table);
        }


        [HttpDelete("Table/{id}")]
        public async Task<IActionResult> DeleteTable(int id)
        {
            if (_dbContext.Tables == null)
            {
                return NotFound();
            }
            var table = await _dbContext.Tables.FindAsync(id);
            if (table == null)
            {
                return NotFound();
            }

            _dbContext.Tables.Remove(table);
            await _dbContext.SaveChangesAsync();

            return NoContent();
        }
    }
}
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using Common;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;
using MyCRM.Authorize;
using MyCRM.Authorize.Responses;
using MyCRM.Database;
using MyCRM.Model;
using MyCRM.Responses;

namespace MyCRM.Controllers;


[Route("api/[controller]")]
[ApiController]
public class AuthorizationController : ControllerBase
{
    public readonly JwtOptions _options;
    public readonly MainDbContext _dbContext;

    public AuthorizationController(IOptions<JwtOptions> options,MainDbContext dbcontext)
    {
        _options = options.Value;
        _dbContext = dbcontext;
    }
    
    
    [HttpGet("Login")]
    public async Task<ActionResult<LoginResponse>> GetToken(int UserId,string password)
   {
       var user = await _dbContext.Users.Include(i => i.Role).FirstOrDefaultAsync(i => i.Id == UserId && i.Password == password);
       if (user == null)
           return NotFound();
        
        var claims = new List<Claim>();
        claims.Add(new Claim(ClaimTypes.Name,user.Id.ToString()));
        claims.Add(new Claim(ClaimTypes.Role, user.Role.Role.DisplayName()));

        var signingKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_options.SecretKey));

        var jwt = new JwtSecurityToken(
            claims: claims,
            expires: DateTime.UtcNow.AddYears(10),
            notBefore: DateTime.UtcNow,
            signingCredentials: new SigningCredentials(signingKey, SecurityAlgorithms.HmacSha256));

        var response = new LoginResponse(new JwtSecurityTokenHandler().WriteToken(jwt), user);
        return new ObjectResult(response);

    }


   [HttpGet]
   [CustomAuthorize(Roles = "admin")]
   public async Task<string> test()
   {
       return "success!!";
   }
}

using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using MyCRM.Database;
using MyCRM.Model;
using MyCRM.Requests;
using MyCRM.Responses;


namespace MyCRM.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class KitchenController : ControllerBase
    {
        private readonly MainDbContext _dbContext;

        public KitchenController(MainDbContext dbContext)
        {
            _dbContext = dbContext;
        }

        [HttpGet("Category")]
        public async Task<ActionResult<IEnumerable<GetCategoryResponse>>> GetCategories()
        {
            if (_dbContext.Categories == null)
            {
                return NotFound();
            }

            var categories = await _dbContext.Categories.ToListAsync();
            var response = new List<GetCategoryResponse>();
            categories.ForEach(i => response.Add(new GetCategoryResponse(i)));
            return response;
        }

        [HttpGet("Category/{id}")]
        public async Task<ActionResult<Category>> GetCategory(int id)
        {
            var category = await _dbContext.Categories.FindAsync(id);

            if (category == null)
            {
                return NotFound();
            }

            return category;
        }

        [HttpPut("Category/{id}")]
        public async Task<GetCategoryResponse> EditCategory(int id, [FromBody] EditCategoryRequest category) 
        {
            var categoryToUpdate = await _dbContext.Categories.FindAsync(id);
            categoryToUpdate.Name = category.Name;


            await _dbContext.SaveChangesAsync();


            var response = new GetCategoryResponse(categoryToUpdate);
            return response;
        }

        [HttpPost("AddCategory")]
        public async Task<IActionResult> PostCategory(AddCategoryRequest request)
        {
            var category = new Category()
            {
                Name = request.Name
            };
            var categoryEntity = await _dbContext.Categories.AddAsync(category);
            await _dbContext.SaveChangesAsync();
            return Ok();
        }

        [HttpDelete("Category/{id}")]
        public async Task<IActionResult> DeleteCategory(int id)
        {
            if (_dbContext.Categories == null)
            {
                return NotFound();
            }
            var category = await _dbContext.Categories.FindAsync(id);
            if (category == null)
            {
                return NotFound();
            }

            _dbContext.Categories.Remove(category);
            await _dbContext.SaveChangesAsync();

            return NoContent();
        }
        //Dishes

        [HttpGet("Dishes")]
        public async Task<ActionResult<IEnumerable<GetDishResponse>>> GetDishes()
        {
            if (_dbContext.Dishes == null)
            {
                return NotFound();
            }

            var dishes = await _dbContext.Dishes.ToListAsync();

            var response = new List<GetDishResponse>();

            dishes.ForEach(i => response.Add(new GetDishResponse(i)));

            return response;
        }


        [HttpGet("Dish/{id}")]
        public async Task<ActionResult<Dish>> GetDish(int id)
        {
            if (_dbContext.Dishes == null)
            {
                return NotFound();
            }
            var dish = await _dbContext.Dishes.FindAsync(id);

            if (dish == null)
            {
                return NotFound();
            }

            return dish;
        }


        [HttpPut("Dish/{id}")]
        public async Task<GetDishResponse> EditDish(int id, [FromBody] EditDishRequest dish)
        {
            var dishToUpdate = await _dbContext.Dishes.FindAsync(id);
            dishToUpdate.Name = dish.Name;
            dishToUpdate.Price = dish.Price;


            await _dbContext.SaveChangesAsync();


            var response = new GetDishResponse(dishToUpdate);
            return response;
        }


        [HttpPost("Dish")]
        public async Task<ActionResult<Dish>> PostDish(AddDishRequest request)
        {
            if (_dbContext.Dishes == null)
            {
                return Problem("Entity set 'MainDbContext.Dishes'  is null.");
            }

            var dish = new Dish()
            {
                Name = request.Name,
                Price = request.Price
            };

            await _dbContext.Dishes.AddAsync(dish);
            await _dbContext.SaveChangesAsync();

            return CreatedAtAction("GetDish", new { id = dish.DishId }, dish);
        }


        [HttpDelete("Dish/{id}")]
        public async Task<IActionResult> DeleteDish(int id)
        {
            if (_dbContext.Dishes == null)
            {
                return NotFound();
            }
            var dish = await _dbContext.Dishes.FindAsync(id);
            if (dish == null)
            {
                return NotFound();
            }

            _dbContext.Dishes.Remove(dish);
            await _dbContext.SaveChangesAsync();

            return NoContent();
        }

        //Ingridients
        

        [HttpGet("Ingridients")]
        public async Task<ActionResult<IEnumerable<GetIngridientResponse>>> GetIngridients()
        {
            if (_dbContext.Ingridients == null)
            {
                return NotFound();
            }

            var ingridients = await _dbContext.Ingridients.ToListAsync();

            var response = new List<GetIngridientResponse>();

            ingridients.ForEach(i => response.Add(new GetIngridientResponse(i)));

            return response;
        }


        [HttpGet("Ingridient/{id}")]
        public async Task<ActionResult<Ingridient>> GetIngridient(int id)
        {
            if (_dbContext.Ingridients == null)
            {
                return NotFound();
            }
            var ingridient = await _dbContext.Ingridients.FindAsync(id);

            if (ingridient == null)
            {
                return NotFound();
            }

            return ingridient;
        }


        [HttpPut("Ingridient/{id}")]
        public async Task<GetIngridientResponse> EditIngridient(int id, [FromBody] EditIngridientRequest ingridient)
        {
            var ingridientToUpdate = await _dbContext.Ingridients.FindAsync(id);
            ingridientToUpdate.Name = ingridient.Name;
            ingridientToUpdate.Count = ingridient.Count;


            await _dbContext.SaveChangesAsync();


            var response = new GetIngridientResponse(ingridientToUpdate);
            return response;
        }


        [HttpPost("Ingridient")]
        public async Task<ActionResult<Ingridient>> PostIngridient(AddIngridientRequest request)
        {
            if (_dbContext.Ingridients == null)
            {
                return Problem("Entity set 'MainDbContext.Ingridients'  is null.");
            }

            var ingridient = new Ingridient()
            {
                Name = request.Name,
                Count = request.Count
            };

            await _dbContext.Ingridients.AddAsync(ingridient);
            await _dbContext.SaveChangesAsync();

            return CreatedAtAction("GetIngridient", new { id = ingridient.IngridientId }, ingridient);
        }


        [HttpDelete("Ingridient/{id}")]
        public async Task<IActionResult> DeleteIngridient(int id)
        {
            if (_dbContext.Ingridients == null)
            {
                return NotFound();
            }
            var ingridient = await _dbContext.Ingridients.FindAsync(id);
            if (ingridient == null)
            {
                return NotFound();
            }

            _dbContext.Ingridients.Remove(ingridient);
            await _dbContext.SaveChangesAsync();

            return NoContent();
        }

    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using MyCRM.Database;
using MyCRM.Model;
using MyCRM.Requests;
using MyCRM.Responses;

namespace MyCRM.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class WaiterController : ControllerBase
    {
        private readonly MainDbContext _dbContext;

        public WaiterController(MainDbContext dbContext)
        {
            _dbContext = dbContext;
        }

        // GET: api/Waiter
        [HttpGet("Orders")]
        public async Task<ActionResult<IEnumerable<GetOrderResponse>>> GetOrders()
        {
            if (_dbContext.Orders == null)
            {
                return NotFound();
            }
            var orders = await _dbContext.Orders.ToListAsync();

            var response = new List<GetOrderResponse>();

            orders.ForEach(i => response.Add(new GetOrderResponse(i)));

            return response;
        }

        // GET: api/Waiter/5
        [HttpGet("Order/{id}")]
        public async Task<ActionResult<Order>> GetOrder(int id)
        {
            var order = await _dbContext.Orders.FindAsync(id);
            if (order == null) 
            {
                return NotFound();
            }
            return order;
        }

        
        [HttpPut("Order/{id}")]
        public async Task<GetOrderResponse> EditOrder(int id, [FromBody] EditOrderRequest order)
        {
            var orderToUpdate = await _dbContext.Orders.FindAsync(id);
            orderToUpdate.WaiterId = order.WaiterId;
            orderToUpdate.TableId = order.TableId;
            

            await _dbContext.SaveChangesAsync();

            var response = new GetOrderResponse(orderToUpdate);
            return response;
        }

        // POST: api/Waiter
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPost("CreateOrder")]
        public async Task<IActionResult> PostOrder(AddOrderRequest request)
        {
            var order = new Order()
            {
                WaiterId = request.WaiterId,
                TableId = request.TableId,
                OrderTime = DateTime.Now
            };
            var orderEntity = await _dbContext.Orders.AddAsync(order);
            await _dbContext.SaveChangesAsync();

            var response = new GetOrderResponse(orderEntity.Entity);

            return Ok(response);
        }

        // DELETE: api/Waiter/5
        [HttpDelete("Order/{id}")]
        public async Task<IActionResult> DeleteOrder(int id)
        {
            if (_dbContext.Orders == null)
            {
                return NotFound();
            }
            var order = await _dbContext.Orders.FindAsync(id);
            if (order == null)
            {
                return NotFound();
            }

            _dbContext.Orders.Remove(order);
            await _dbContext.SaveChangesAsync();

            return NoContent();
        }

        
    }
}
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using MyCRM.Model;

namespace MyCRM.Database.Configuration
{
    public class OrderConfiguration : IEntityTypeConfiguration<Order>
    {
        public void Configure(EntityTypeBuilder<Order> builder) 
        {
            builder.HasKey(i =>  i.OrderId);

            builder.HasIndex(i => i.OrderTime);
        }
    }
}
using Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using MyCRM.Model;

namespace MyCRM.Database.Configuration;

public class UserRoleConfiguration : IEntityTypeConfiguration<UserRole>
{
    public void Configure(EntityTypeBuilder<UserRole> builder)
    {
        builder.HasKey(i => i.Id);
        builder.Property(t => t.Role)
            .HasConversion<string>(s => s.DisplayName(), s => EnumHelper.FromDisplayName<RoleType>(s));
    }
}
using Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using MyCRM.Model;

namespace MyCRM.Database.Configuration;

public class UserConfiguration : IEntityTypeConfiguration<User>
{
    public void Configure(EntityTypeBuilder<User> builder)
    {

        builder.HasOne(u => u.Role)
            .WithMany().HasForeignKey(u => u.RoleId);
    }
}
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using MyCRM.Model;

namespace MyCRM.Database.Configuration
{
    public class WaiterConfiguration : IEntityTypeConfiguration<Waiter>
    {
        public void Configure(EntityTypeBuilder<Waiter> builder)
        {
          //  builder.HasKey(i => i.WaiterId);

         //   builder.HasMany<WaiterSchedule>().WithOne(i => i.Waiter);

        }
    }
}
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using MyCRM.Model;

namespace MyCRM.Database.Configuration
{
    public class WaiterScheduleConfiguration : IEntityTypeConfiguration<WaiterSchedule>
    {
        public void Configure(EntityTypeBuilder<WaiterSchedule> builder)
        {
            builder.HasKey(i => i.WaiterScheduleId);

            builder.HasIndex(i => i.Start);
            builder.HasIndex(i => i.End);
        }
    }
}
using System.Reflection.Emit;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using MyCRM.Model;

namespace MyCRM.Database
{
    public class MainDbContext : DbContext
    {
        public MainDbContext(DbContextOptions<MainDbContext> options) : base(options)
        {
            //Database.EnsureDeleted();
            //Database.EnsureCreated();
            
            
        }
        public DbSet<User> Users { get; set; }
        public DbSet<Waiter> Waiters { get; set; }
        public DbSet<WaiterSchedule> WaiterSchedules { get; set; }

        public DbSet<TableSchedule> TableSchedules { get; set; }
        public DbSet<Table> Tables { get; set; }
        public DbSet<Order> Orders { get; set; }
        public DbSet<Ingridient> Ingridients { get; set; }
        public DbSet<Dish> Dishes { get; set; }
        public DbSet<Category> Categories { get; set; }
        public DbSet<UserRole> Roles { get; set; } 
        
        

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            Assembly assemblyWithConfigurations = GetType().Assembly; //get whatever assembly you want
            modelBuilder.ApplyConfigurationsFromAssembly(assemblyWithConfigurations);

            modelBuilder.Entity<UserRole>().HasData
            (
                new UserRole() {Id = 1, Role = RoleType.Admin },
                new UserRole() {Id = 2,Role = RoleType.Waiter }
                
            );

            modelBuilder.Entity<User>().HasData
            (
                new User() { Id = 1, FirstName = "Александер", LastName = "Смирнов", Patronymic = "Владимирович",Phone = 123456, Password = 1111.ToString(),RoleId = 1},
                new User() { Id = 2, FirstName = "Василий", LastName = "Антонов", Patronymic = "Сергеевич",Phone = 11111, Password = 2222.ToString(),RoleId = 2}
                );
            
            

        }
    }
}
namespace MyCRM.Model
{
    public class Category
    {
        public int CategoryId { get; set; }
        public string Name { get; set; }
        public List<Dish> Dishes { get; set; } = new();
    }
}
using System.Text.Json.Serialization;

namespace MyCRM.Model;

public class Dish
{
    public int DishId { get; set; }
    public string Name { get; set; }
    public int Price { get; set; }
    [JsonIgnore]
    public List<Order> Orders { get; set; } = new();
    [JsonIgnore]
    public List<Ingridient> Ingridients { get; set; } = new();
    [JsonIgnore]
    public List<Category> Categories { get; set; } = new();
}
namespace MyCRM.Model
{
    public class Ingridient
    {
        public int IngridientId { get; set; }
        public string Name { get; set; }
        public int Count { get; set; }

        public List<Dish> Dishes { get; set; } = new();
    }
}
using System.ComponentModel.DataAnnotations;

using System.Text.Json.Serialization;


namespace MyCRM.Model
{
    public class Order
    {
        public int OrderId { get; set; }
        public int WaiterId { get; set; } // внешний ключ
        [JsonIgnore]
        public Waiter? Waiter { get; set; } // навигационное свойство
        public int TableId { get; set; }
        [JsonIgnore]
        public Table? Table { get; set; }

        public DateTime OrderTime { get; set; }
        [JsonIgnore]
        public List<Dish> Dishes { get; set; } = new();

    }
}
using System.ComponentModel.DataAnnotations;

namespace MyCRM.Model;

public enum RoleType
{
    [Display(Name = "Admin")] Admin = 0,
    [Display(Name = "Waiter")] Waiter
}
using System.Text.Json.Serialization;

namespace MyCRM.Model
{
    public class Table
    {
        public int Id { get; set; }
        public string? Description { get; set; }
        [JsonIgnore]
        public List<TableSchedule> Schedules { get; set; } = new();
    }
}
namespace MyCRM.Model
{
    public class TableSchedule
    {
        public int TableScheduleId { get; set; }
        public Table Table { get; set; }
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
    }
}
using Microsoft.AspNetCore.Identity;

namespace MyCRM.Model;

public class User 
{
    public int Id { get; set; }
    
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string Patronymic { get; set; }
    public int? Phone { get; set; }
    
    public string? Password { get; set; } 
    
    public int RoleId { get; set; }
    public UserRole Role { get; set; }
}
namespace MyCRM.Model;

public class UserRole
{
    public int Id { get; set; }
    public RoleType Role { get; set; }
}
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Text.Json.Serialization;

namespace MyCRM.Model
{
    public class Waiter: User
    {
        
        [JsonIgnore] public List<WaiterSchedule> WaiterSchedules { get; set; } = new();
        [JsonIgnore] public List<Order> Orders { get; set; } = new();

    }
}
namespace MyCRM.Model
{
    public class WaiterSchedule
    {
        public int WaiterScheduleId { get; set; }
      //  public int WaiterId { get; set; }
        public Waiter Waiter { get; set; }
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
    }
}
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v7.0", FrameworkDisplayName = ".NET 7.0")]
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("MyCRM")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+928eefb62a53fe54254a520c9729772a922b60cd")]
[assembly: System.Reflection.AssemblyProductAttribute("MyCRM")]
[assembly: System.Reflection.AssemblyTitleAttribute("MyCRM")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// РЎРѕР·РґР°РЅРѕ РєР»Р°СЃСЃРѕРј WriteCodeFragment MSBuild.

// <auto-generated/>
global using global::Microsoft.AspNetCore.Builder;
global using global::Microsoft.AspNetCore.Hosting;
global using global::Microsoft.AspNetCore.Http;
global using global::Microsoft.AspNetCore.Routing;
global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Hosting;
global using global::Microsoft.Extensions.Logging;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Net.Http.Json;
global using global::System.Threading;
global using global::System.Threading.Tasks;
using MyCRM.Model;

namespace MyCRM.Repositories;

public interface IWaiterRepository
{
    Task<Waiter?> CreateAsync(Waiter w);
    Task<IEnumerable<Waiter>> RetrieveAllAsync();
    Task<Waiter?> RetrieveAsync(int id);
    Task<Waiter?> UpdateAsync(int id, Waiter w);
    Task<bool?> DeleteAsync(int id);
}
using System.Collections.Concurrent;
using Microsoft.AspNetCore.Http.HttpResults;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using MyCRM.Database;
using MyCRM.Model;

namespace MyCRM.Repositories;

public class WaiterRepository 
{
    //private static ConcurrentDictionary<int, Waiter>? waiterCache;

    private readonly MainDbContext _dbContext;

    public WaiterRepository(MainDbContext dbContext)
    {
        _dbContext = dbContext;


    }
        
}


    

    

    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
  
namespace MyCRM.Requests
{
    public class AddCategoryRequest
    {
        public int CategoryId { get; set; }
        public string Name { get; set; }
    }
}
namespace MyCRM.Requests
{
    public class AddDishRequest
    {
        public int DishId { get; set; }
        public string Name { get; set; }
        public int Price { get; set; }
    }
}
namespace MyCRM.Requests
{
    public class AddIngridientRequest
    {
        public int IngridientId { get; set; }
        public string Name { get; set; }
        public int Count { get; set; }
    }
}
namespace MyCRM.Requests
{
    public class AddOrderRequest
    {
        public int WaiterId { get; set; }
        public int TableId { get; set; }
        public DateTime DateTime { get; set; }
    }
}
namespace MyCRM.Requests
{
    public class AddTableRequest
    {
        public int TableId { get; set; }
        public string Description { get; set; }
    }
}
namespace MyCRM.Requests;

public class AddWaiterRequest
{
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string Patronymic { get; set; }
    public int Phone { get; set; }
}
namespace MyCRM.Requests
{
    public class EditCategoryRequest
    {
        public int CategoryId { get; set; }
        public string? Name { get; set; }
    }
}
namespace MyCRM.Requests
{
    public class EditDishRequest
    {
        public int DishId { get; set; }
        public string Name { get; set; }
        public int Price { get; set; }
    }
}
namespace MyCRM.Requests
{
    public class EditIngridientRequest
    {
        public int IngridientId { get; set; }
        public string Name { get; set; }
        public int Count { get; set; }
    }
}
namespace MyCRM.Requests
{
    public class EditOrderRequest
    {
        public int OrderId { get; set; }
        public int WaiterId { get; set; }
        public int TableId { get; set; }
        
    }
}
namespace MyCRM.Requests
{
    public class EditTableRequest
    {
        public int TableId { get; set; }
        public string Description { get; set; }
    }
}
namespace MyCRM.Requests
{
    public class EditWaiterRequest
    {
        public int Id { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Patronymic { get; set; }
        public int? Phone { get; set; }
    }
}
using MyCRM.Model;

namespace MyCRM.Responses
{
    public class GetCategoryResponse
    {
        public int CategoryId { get; set; }
        public string Name { get; set; }

        public GetCategoryResponse(Category category)
        {
            CategoryId = category.CategoryId; 
            Name = category.Name;
        }
    }
}
using MyCRM.Model;

namespace MyCRM.Responses
{
    public class GetDishResponse
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public int Price { get; set; }

        public GetDishResponse()
        {

        }

        public GetDishResponse(Dish dish)
        {
            Id = dish.DishId;
            Name = dish.Name;
            Price = dish.Price;
        }
    }


}
using MyCRM.Model;

namespace MyCRM.Responses
{
    public class GetIngridientResponse
    {
        public int IngridientId { get; set; }
        public string Name { get; set; }
        public int Count { get; set; }

        public GetIngridientResponse(Ingridient ingridient)
        {
            IngridientId = ingridient.IngridientId;
            Name = ingridient.Name;
            Count = ingridient.Count;
        }
    }


}
using MyCRM.Model;

namespace MyCRM.Responses
{
    public class GetOrderResponse 
    {
        
        public int Id { get; set; }
        public int WaiterId { get; set; }
        public int TableId { get; set; }
        public DateTime OrderTime { get; set; }

        public GetOrderResponse(Order order)
        {
            Id = order.OrderId;
            WaiterId = order.WaiterId;
            TableId = order.TableId;
            OrderTime = order.OrderTime;
        }
    }
}
using MyCRM.Model;

namespace MyCRM.Responses
{
    public class GetTableResponse
    {
        public int TableId { get; set; }
        public string Description { get; set; }

        public GetTableResponse(Table table)
        {
            TableId = table.Id;
            Description = table.Description;
        }
    }


}
using MyCRM.Model;

namespace MyCRM.Responses;

public class GetWaiterResponse
{
    public int Id { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string Patronymic { get; set; }
    public int? Phone { get; set; }

    public GetWaiterResponse()
    {

    }



    public GetWaiterResponse(Waiter waiter)
    {
        Id = waiter.Id;
        FirstName = waiter.FirstName;
        LastName = waiter.LastName;
        Patronymic = waiter.Patronymic;
        Phone = waiter.Phone;
    }
}
using Microsoft.AspNetCore;
using MyCRM;

public class Program
{
    public static void Main(string[] args)
    {
        CreateWebHostBuilder(args).Build().Run();

    }

    public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>
        WebHost.CreateDefaultBuilder(args).
        UseStartup<Startup>();

}
using System.Text;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using MyCRM.Authorize;
using MyCRM.Database;
using MyCRM.Repositories;

namespace MyCRM
{
    public class Startup
    {
        public IConfiguration Configuration { get; }
        public IWebHostEnvironment Environment { get; }


        public Startup(IConfiguration configuration, IWebHostEnvironment env)
        {
            Configuration = configuration;
            Environment = env;
        }

        public void ConfigureServices(IServiceCollection services)
        {
            

            services.AddControllers();
            services.AddEndpointsApiExplorer();
       //     services.AddMediatR(typeof(Startup));
            services.AddSwaggerGen();
            services.Configure<JwtOptions>(Configuration.GetSection("JwtOptions"));

            var secretKey = Configuration.GetSection("JwtOptions:SecretKey").Value;
            var signingKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secretKey));
            
            services.AddAuthentication(options =>
            {
                options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
                options.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;
            }).AddJwtBearer(options =>
            {
                options.TokenValidationParameters = new TokenValidationParameters
                {
                    ValidateIssuer = false,
                    ValidateAudience = false,
                    IssuerSigningKey = signingKey,
                    ValidateIssuerSigningKey = true
                };
            });

            AddDbContext(services);
            services.AddTransient<WaiterRepository>();


            

        }

        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            app.UseRouting();
            app.UseSwagger();
            app.UseSwaggerUI();
            app.UseHttpsRedirection();

            app.UseAuthentication();
            app.UseAuthorization();
            app.UseCors(builder =>
            {

                builder.AllowAnyHeader();
                builder.AllowAnyMethod();
                builder.AllowAnyOrigin();

            });

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllerRoute(
                    name: "default",
                    pattern: "{controller=Home}/{action=Index}/{id?}");
            });
        }

        private void AddDbContext(IServiceCollection services)
        {
            var connectionString = Configuration.GetConnectionString("local");
  

            services.AddDbContext<MainDbContext>(options =>
            options.UseSqlServer(connectionString)
            .LogTo(Console.WriteLine, LogLevel.Information));

        }
    }
}
namespace MyCRM;

public class TestOptions
{
    public string aa { get; set; }
}
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v7.0", FrameworkDisplayName = ".NET 7.0")]
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Tests")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+928eefb62a53fe54254a520c9729772a922b60cd")]
[assembly: System.Reflection.AssemblyProductAttribute("Tests")]
[assembly: System.Reflection.AssemblyTitleAttribute("Tests")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// РЎРѕР·РґР°РЅРѕ РєР»Р°СЃСЃРѕРј WriteCodeFragment MSBuild.

// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
namespace Tests;

[CollectionDefinition("Crm")]
public class CrmCollection :ICollectionFixture<CrmFixture>
{

    public CrmCollection()
    {
        
    }
}
using Microsoft.AspNetCore.Mvc.Testing;
using Microsoft.Extensions.DependencyInjection;
using MyCRM;
using MyCRM.Database;


namespace Tests;


public class CrmFixture : WebApplicationFactory<Startup>
{
    public IServiceProvider ServiceScope { get; set; }
    public bool _disposed;
    
    public CrmFixture()
    {
        var scope = Services.CreateScope();
        ServiceScope = scope.ServiceProvider;
    }


    protected override void Dispose(bool disposing)
    {
        if (_disposed)
        {
            return;
        }

        if (disposing)
        {
            var context = Services.CreateScope().ServiceProvider.GetService<MainDbContext>();
            ClearDb(context);
        }

        _disposed = true;
    }

    private static void ClearDb(MainDbContext? dbContext)
    {
        dbContext.Waiters.RemoveRange(dbContext.Waiters);
        dbContext.Orders.RemoveRange(dbContext.Orders);
        dbContext.Dishes.RemoveRange(dbContext.Dishes);
        dbContext.Tables.RemoveRange(dbContext.Tables);
        dbContext.Ingridients.RemoveRange(dbContext.Ingridients);
        dbContext.Categories.RemoveRange(dbContext.Categories);
        dbContext.WaiterSchedules.RemoveRange(dbContext.WaiterSchedules);
        dbContext.SaveChanges();
    }
}
global using Xunit;
namespace Tests;

public class UnitTest1
{
    [Fact]
    public void Test1()
    {
        var test = true;
        Assert.True(test);
        var a = 123;
    }
}
using System.Net.Http.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using MyCRM.Database;
using MyCRM.Requests;
using Shouldly;

namespace Tests;


[Collection("Crm")]
public class WaiterTests
{
    private readonly HttpClient _httpClient;
    private readonly MainDbContext _dbContext;

    public WaiterTests(CrmFixture crmFixture)
    {
        _dbContext = crmFixture.ServiceScope.GetService<MainDbContext>();
        _httpClient = crmFixture.CreateClient();
    }
    
    
    [Fact]
    public async void Test1()
    {
        var request = new AddWaiterRequest()
        {
            FirstName = "john",
            LastName = "smith",
            Patronymic = "Alexandrovich",
            Phone = 123456789
        };
        await _httpClient.PostAsJsonAsync("api/Admin1/CreateWaiter",request);

        var waiter = await _dbContext.Waiters.FirstAsync();
        
        waiter.FirstName.ShouldBe(request.FirstName);
        waiter.LastName.ShouldBe(request.LastName);
        waiter.Patronymic.ShouldBe(request.Patronymic);
        waiter.Phone.ShouldBe(request.Phone);
    }
}
